/*
 * X-Bit Right Shifter Module
 * This module implements a configurable right shifter that can shift a 32-bit value
 * by a specified number of bits (SHIFT parameter). The module uses a 2-to-1
 * multiplexer for each bit position to select between the original and shifted values.
 * 
 * The shift operation:
 * - Shifts bits right by SHIFT positions
 * - Fills vacated positions with the pad value
 * - Truncates bits that shift out of the 32-bit range
 * 
 * This module is used in the main shifter for both logical and arithmetic right shifts,
 * with the pad value determining whether it's a logical (0) or arithmetic (sign-extended) shift.
 */

module x_bit_right_shifter #(
  // Parameter for shift amount, must be between 0 and 31
  SHIFT = 8 : SHIFT > -1 & SHIFT < 32
)(
  input a[32],     // Input value to be shifted
  input shift,     // Control signal to enable/disable shift
  input pad,       // Value to fill vacated positions
  output out[32]   // Shifted result
) {
  // Array of 2-to-1 multiplexers, one for each bit position
  mux_2 mux_2_32[32];

  // Intermediate signal to store the shifted value
  sig shifted_bits[32];

  always {
    // Create shifted value by:
    // 1. Filling SHIFT positions with pad value
    // 2. Taking bits from position 31 down to SHIFT
    shifted_bits = c{SHIFTx{pad}, a[31:SHIFT]}

    // Set all multiplexer selectors to the shift control signal
    mux_2_32.s = 32x{shift}

    // Connect inputs to each multiplexer
    repeat (j, 32) {
      mux_2_32.in[j][0] = a[j];           // Original bit value (no shift)
      mux_2_32.in[j][1] = shifted_bits[j]; // Shifted bit value
    }
    
    // Get final output from multiplexers
    out = mux_2_32.out;
  }
}
