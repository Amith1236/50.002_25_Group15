module x_bit_right_shifter #(
  // Parameter declaration, to be set during module instantiation
  // Default value is 8
  SHIFT = 8 : SHIFT > -1 & SHIFT < 32
)(
  input a[32],     // 32-bit input
  input shift,     // Shift enable signal (1 = shift, 0 = pass-through)
  input pad,       // Padding bit for empty positions
  output out[32]   // 32-bit output
) {
  // Module declarations
  // Instantiate 32 mux_2 units for bitwise selection
  mux_2 mux_2_32[32];

  // Intermediate signal for shifted bits
  sig shifted_bits[32];

  always {
    // Initialize shifted_bits to 0
    // Assign shifted values, ensuring out-of-bounds indices use `pad`
        shifted_bits = c{SHIFTx{pad}, a[31:SHIFT]}

    // Connect the selector of each mux_2 with shift
    mux_2_32.s = 32x{shift}

    // Use a repeat-loop to:
    // - Connect input[0] of each mux_2 with a[i] (no shift)
    // - Connect input[1] of each mux_2 with shifted_bits[i] (shifted version)
    repeat (j, 32) {
      mux_2_32.in[j][0] = a[j];         // No shift case
      mux_2_32.in[j][1] = shifted_bits[j]; // Shifted output
    }
    
    // Assign output from multiplexer
    out = mux_2_32.out;
  }
}
