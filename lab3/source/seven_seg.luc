/*
 * Seven Segment Display Module
 * This module converts a 4-bit hexadecimal input into the appropriate 7-segment
 * display pattern. It implements a decoder that maps each possible 4-bit value
 * (0-F) to its corresponding 7-segment display pattern.
 * 
 * The 7-segment display pattern is represented as a 7-bit value where each bit
 * controls one segment of the display:
 * - Bit 0: Top segment
 * - Bit 1: Top right segment
 * - Bit 2: Bottom right segment
 * - Bit 3: Bottom segment
 * - Bit 4: Bottom left segment
 * - Bit 5: Top left segment
 * - Bit 6: Middle segment
 * 
 * A '1' in any position means the segment is lit, while a '0' means it's off.
 */

module seven_seg(
    input char[4],          // 4-bit input representing hex digit (0-F)
    output segs[7]          // 7-bit output controlling display segments
) {
    always {
        // Convert input hex digit to corresponding 7-segment pattern
        case (char) {
            4h0: segs = 7b0111111;    // Pattern for '0'
            4h1: segs = 7b0000110;    // Pattern for '1'
            4h2: segs = 7b1011011;    // Pattern for '2'
            4h3: segs = 7b1001111;    // Pattern for '3'
            4h4: segs = 7b1100110;    // Pattern for '4'
            4h5: segs = 7b1101101;    // Pattern for '5'
            4h6: segs = 7b1111101;    // Pattern for '6'
            4h7: segs = 7b0000111;    // Pattern for '7'
            4h8: segs = 7b1111111;    // Pattern for '8'
            4h9: segs = 7b1100111;    // Pattern for '9'
            4hA: segs = 7b1110111;    // Pattern for 'A'
            4hB: segs = 7b1111100;    // Pattern for 'B'
            4hC: segs = 7b0111001;    // Pattern for 'C'
            4hD: segs = 7b1011110;    // Pattern for 'D'
            4hE: segs = 7b1111001;    // Pattern for 'E'
            4hF: segs = 7b1110001;    // Pattern for 'F'
            default: segs = 7b0000000; // All segments off for invalid input
        }
    }
}