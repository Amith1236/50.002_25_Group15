/*
    This file was generated automatically by Alchitry Labs 2.0.28-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip
    );
    logic rst;
    logic slow_clock;
    localparam SIZE = 5'h10;
    localparam SLOW_CLOCK_DEFAULT_SPEED = 5'h1c;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam SEVEN_SEG_DIV = 5'h10;
    localparam _MP_DIGITS_1300447432 = 3'h4;
    localparam _MP_LEADING_ZEROS_1300447432 = 1'h1;
    logic [13:0] M_decimal_renderer_value;
    logic [3:0][3:0] M_decimal_renderer_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_1300447432),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_1300447432)
    ) decimal_renderer (
        .value(M_decimal_renderer_value),
        .digits(M_decimal_renderer_digits)
    );
    
    
    localparam E_States_RUN = 3'h0;
    localparam E_States_STOP = 3'h1;
    localparam E_States_FASTER = 3'h2;
    localparam E_States_SLOWER = 3'h3;
    localparam E_States_INCREASE = 3'h4;
    localparam E_States_DECREASE = 3'h5;
    localparam E_States_UPDATE = 3'h6;
    localparam E_States_IDLE = 3'h7;
    localparam _MP_STAGES_813985227 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_813985227)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_RISE_894579372 = 1'h1;
    localparam _MP_FALL_894579372 = 1'h0;
    logic M_slow_clock_edge_in;
    logic M_slow_clock_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_894579372),
        .FALL(_MP_FALL_894579372)
    ) slow_clock_edge (
        .clk(clk),
        .in(M_slow_clock_edge_in),
        .out(M_slow_clock_edge_out)
    );
    
    
    localparam logic [4:0][0:0] _MP_RISE_786110518 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_786110518 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_786110518;
    
    generate
        for (idx_0_786110518 = 0; idx_0_786110518 < 5; idx_0_786110518 = idx_0_786110518 + 1) begin: forLoop_idx_0_786110518
            edge_detector #(
                .RISE(_MP_RISE_786110518[idx_0_786110518]),
                .FALL(_MP_FALL_786110518[idx_0_786110518])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_786110518]),
                .out(M_io_button_edge_out[idx_0_786110518])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][26:0] _MP_CLK_FREQ_1841625102 = {{27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100}};
    localparam _MP_MIN_DELAY_1841625102 = 5'h14;
    localparam _MP_NUM_SYNC_1841625102 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_1841625102;
    
    generate
        for (idx_0_1841625102 = 0; idx_0_1841625102 < 5; idx_0_1841625102 = idx_0_1841625102 + 1) begin: forLoop_idx_0_1841625102
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_1841625102[idx_0_1841625102]),
                .MIN_DELAY(_MP_MIN_DELAY_1841625102),
                .NUM_SYNC(_MP_NUM_SYNC_1841625102)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_1841625102]),
                .out(M_io_button_cond_out[idx_0_1841625102])
            );
        end
    endgenerate
    
    
    logic [15:0] D_counter_d, D_counter_q = 0;
    logic [3:0] D_speed_pointer_d, D_speed_pointer_q = 5'h1c;
    logic D_slow_clock_enable_d, D_slow_clock_enable_q = 1'h0;
    logic [2:0] D_states_d, D_states_q = 3'h7;
    logic [15:0] D_current_value_d, D_current_value_q = 1'h0;
    logic [4:0] D_current_delta_d, D_current_delta_q = 1'h1;
    localparam _MP_SIZE_540356574 = 5'h10;
    logic [15:0] M_adder_a;
    logic [15:0] M_adder_b;
    logic [0:0] M_adder_subtract;
    logic [15:0] M_adder_s;
    logic [0:0] M_adder_v;
    logic [0:0] M_adder_n;
    logic [0:0] M_adder_z;
    
    adder #(
        .SIZE(_MP_SIZE_540356574)
    ) adder (
        .clk(clk),
        .rst(rst),
        .a(M_adder_a),
        .b(M_adder_b),
        .subtract(M_adder_subtract),
        .s(M_adder_s),
        .v(M_adder_v),
        .n(M_adder_n),
        .z(M_adder_z)
    );
    
    
    localparam _MP_SIZE_40993190 = 4'h5;
    logic [4:0] M_delta_adder_a;
    logic [4:0] M_delta_adder_b;
    logic [0:0] M_delta_adder_subtract;
    logic [4:0] M_delta_adder_s;
    logic [0:0] M_delta_adder_v;
    logic [0:0] M_delta_adder_n;
    logic [0:0] M_delta_adder_z;
    
    adder #(
        .SIZE(_MP_SIZE_40993190)
    ) delta_adder (
        .clk(clk),
        .rst(rst),
        .a(M_delta_adder_a),
        .b(M_delta_adder_b),
        .subtract(M_delta_adder_subtract),
        .s(M_delta_adder_s),
        .v(M_delta_adder_v),
        .n(M_delta_adder_n),
        .z(M_delta_adder_z)
    );
    
    
    localparam _MP_DIGITS_90434131 = 3'h4;
    localparam _MP_DIV_90434131 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_90434131),
        .DIV(_MP_DIV_90434131)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    always @* begin
        D_states_d = D_states_q;
        D_current_delta_d = D_current_delta_q;
        D_current_value_d = D_current_value_q;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        D_speed_pointer_d = D_speed_pointer_q;
        D_counter_d = D_counter_q;
        
        D_states_d = D_states_q;
        D_current_delta_d = D_current_delta_q;
        D_current_value_d = D_current_value_q;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        D_speed_pointer_d = D_speed_pointer_q;
        M_adder_a = 1'h0;
        M_adder_b = 1'h0;
        M_adder_subtract = 1'h0;
        M_delta_adder_a = 1'h0;
        M_delta_adder_b = 1'h0;
        M_delta_adder_subtract = 1'h0;
        D_counter_d = D_counter_q + 1'h1;
        slow_clock = D_counter_q[D_speed_pointer_q];
        M_slow_clock_edge_in = slow_clock;
        
        case (D_slow_clock_enable_q)
            1'h0: begin
                M_slow_clock_edge_in = 1'h0;
            end
            1'h1: begin
                M_slow_clock_edge_in = slow_clock;
            end
            default: begin
                M_slow_clock_edge_in = 1'h0;
            end
        endcase
        
        case (D_states_q)
            3'h7: begin
                if (M_slow_clock_edge_out) begin
                    D_states_d = 3'h6;
                end else begin
                    if (M_io_button_edge_out[1'h1]) begin
                        if (~(|D_slow_clock_enable_q)) begin
                            D_states_d = 3'h0;
                        end else begin
                            D_states_d = 3'h1;
                        end
                    end else begin
                        if (M_io_button_edge_out[1'h0]) begin
                            D_states_d = 3'h2;
                        end else begin
                            if (M_io_button_edge_out[2'h2]) begin
                                D_states_d = 3'h3;
                            end else begin
                                if (M_io_button_edge_out[3'h4]) begin
                                    D_states_d = 3'h4;
                                end else begin
                                    if (M_io_button_edge_out[2'h3]) begin
                                        D_states_d = 3'h5;
                                    end else begin
                                        
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'h6: begin
                M_adder_a = D_current_value_q;
                M_adder_b = {{7'hb{D_current_delta_q[3'h4]}}, D_current_delta_q};
                if (~M_adder_n & ~M_adder_v) begin
                    D_current_value_d = M_adder_s;
                end else begin
                    if (~M_adder_v) begin
                        D_current_value_d = 1'h0;
                    end
                end
                D_states_d = 3'h7;
            end
            3'h0: begin
                D_slow_clock_enable_d = 1'h1;
                D_states_d = 3'h7;
            end
            3'h3: begin
                if (D_speed_pointer_q < 6'hf) begin
                    D_speed_pointer_d = D_speed_pointer_q + 1'h1;
                end
                D_states_d = 3'h7;
            end
            3'h2: begin
                if (D_speed_pointer_q > 1'h0) begin
                    D_speed_pointer_d = D_speed_pointer_q - 1'h1;
                end
                D_states_d = 3'h7;
            end
            3'h4: begin
                if (~M_delta_adder_n & ~M_delta_adder_v) begin
                    D_current_delta_d = M_delta_adder_s;
                end
                D_states_d = 3'h7;
            end
            3'h5: begin
                if (~M_delta_adder_v) begin
                    D_current_delta_d = 1'h0;
                end
                D_states_d = 3'h7;
            end
            3'h1: begin
                D_slow_clock_enable_d = 1'h0;
                D_states_d = 3'h7;
            end
        endcase
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = 8'h0;
        usb_tx = usb_rx;
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        io_led[1'h1] = 8'h2;
        io_led[2'h2] = 8'h3;
        io_segment = 1'h0;
        io_select = 4'hf;
        led = {slow_clock, 2'h0, D_speed_pointer_q};
        io_led = {{4'h0, D_current_delta_q[2'h3:1'h0]}, D_current_value_q[6'hf:6'h8], D_current_value_q[3'h7:1'h0]};
        M_decimal_renderer_value = D_current_value_q;
        M_seg_values = M_decimal_renderer_digits;
        io_segment = ~M_seg_seg;
        io_select = ~M_seg_sel;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_counter_q <= 0;
            D_speed_pointer_q <= 5'h1c;
            D_slow_clock_enable_q <= 1'h0;
            D_states_q <= 3'h7;
            D_current_value_q <= 1'h0;
            D_current_delta_q <= 1'h1;
        end else begin
            D_counter_q <= D_counter_d;
            D_speed_pointer_q <= D_speed_pointer_d;
            D_slow_clock_enable_q <= D_slow_clock_enable_d;
            D_states_q <= D_states_d;
            D_current_value_q <= D_current_value_d;
            D_current_delta_q <= D_current_delta_d;
        end
    end
endmodule